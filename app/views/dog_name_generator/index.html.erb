<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= form_authenticity_token %>">
    <title>Dog Name Generator</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 700px;
            width: 100%;
            transform: translateY(0);
            transition: transform 0.3s ease;
        }

        .container:hover {
            transform: translateY(-5px);
        }

        h1 {
            color: #333;
            margin-bottom: 10px;
            font-size: 2.5rem;
            font-weight: 700;
        }

        .subtitle {
            color: #666;
            margin-bottom: 30px;
            font-size: 1.1rem;
        }

        .ai-badge {
            display: inline-block;
            background: linear-gradient(135deg, #ff6b6b, #ffa500);
            color: white;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 20px;
        }

        .api-section {
            background: rgba(255, 255, 255, 0.7);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .api-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            margin-bottom: 10px;
            transition: border-color 0.3s ease;
        }

        .api-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .api-help {
            font-size: 12px;
            color: #666;
            text-align: left;
        }

        .parameters {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
            text-align: left;
        }

        .parameter-group {
            background: rgba(255, 255, 255, 0.7);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .parameter-group label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 600;
            font-size: 14px;
        }

        select, input[type="range"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            background: white;
            color: #333;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

        select:focus {
            outline: none;
            border-color: #667eea;
        }

        input[type="range"] {
            padding: 0;
            height: 40px;
            -webkit-appearance: none;
            background: transparent;
            border: none;
        }

        input[type="range"]::-webkit-slider-track {
            background: #e0e0e0;
            height: 6px;
            border-radius: 3px;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            background: #667eea;
            height: 20px;
            width: 20px;
            border-radius: 50%;
            cursor: pointer;
            margin-top: -7px;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin-right: 8px;
            transform: scale(1.2);
        }

        .generate-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 18px 40px;
            border-radius: 50px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 20px 0;
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            position: relative;
            min-width: 250px;
        }

        .generate-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 30px rgba(102, 126, 234, 0.4);
        }

        .generate-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 30px;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .results-grid.show {
            opacity: 1;
            transform: translateY(0);
        }

        .name-card {
            background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .name-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

        .name-card.selected {
            background: linear-gradient(135deg, #55a3ff 0%, #667eea 100%);
            color: white;
        }

        .dog-name {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            color: #333;
        }

        .name-card.selected .dog-name {
            color: white;
        }

        .name-description {
            font-size: 12px;
            color: #666;
            line-height: 1.4;
        }

        .name-card.selected .name-description {
            color: rgba(255, 255, 255, 0.9);
        }

        .save-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 12px;
            font-size: 12px;
            cursor: pointer;
            margin-top: 8px;
            transition: background 0.3s ease;
        }

        .save-btn:hover {
            background: #218838;
        }

        .error-message {
            background: #ff6b6b;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            display: none;
        }

        .favorites {
            margin-top: 30px;
            text-align: left;
        }

        .favorites h3 {
            color: #333;
            margin-bottom: 15px;
        }

        .favorite-item {
            display: inline-block;
            background: #f8f9fa;
            padding: 8px 15px;
            margin: 5px;
            border-radius: 20px;
            font-size: 14px;
            color: #555;
            border: 1px solid #e9ecef;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .favorite-item:hover {
            background: #e9ecef;
            transform: translateY(-2px);
        }

        .ai-status {
            font-size: 14px;
            color: #666;
            margin-top: 10px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.7);
            border-radius: 8px;
        }

        @media (max-width: 768px) {
            .parameters {
                grid-template-columns: 1fr;
                gap: 15px;
            }
            
            .results-grid {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 30px 20px;
            }
            
            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="ai-badge">ü§ñ AI-Powered</div>
        <h1>üêï Dog Name Generator</h1>
        <p class="subtitle">Generate unique, creative names for your dog!</p>
        
        <div class="parameters">
            <div class="parameter-group">
                <label for="category">Name Style:</label>
                <select id="category">
                    <option value="classic">Classic & Traditional</option>
                    <option value="funny">Funny & Quirky</option>
                    <option value="strong">Strong & Powerful</option>
                    <option value="cute">Cute & Adorable</option>
                    <option value="unique">Unique & Creative</option>
                    <option value="food">Food-Inspired</option>
                    <option value="nature">Nature-Themed</option>
                    <option value="royal">Royal & Noble</option>
                </select>
            </div>

            <div class="parameter-group">
                <label for="gender">Gender:</label>
                <select id="gender">
                    <option value="any">Any Gender</option>
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="unisex">Gender-Neutral</option>
                </select>
            </div>

            <div class="parameter-group">
                <label for="size">Dog Size:</label>
                <select id="size">
                    <option value="any">Any Size</option>
                    <option value="small">Small (Chihuahua, Pug)</option>
                    <option value="medium">Medium (Beagle, Bulldog)</option>
                    <option value="large">Large (Golden Retriever, Lab)</option>
                    <option value="giant">Giant (Great Dane, Mastiff)</option>
                </select>
            </div>

            <div class="parameter-group">
                <label for="personality">Personality:</label>
                <select id="personality">
                    <option value="any">Any Personality</option>
                    <option value="playful">Playful & Energetic</option>
                    <option value="calm">Calm & Gentle</option>
                    <option value="loyal">Loyal & Protective</option>
                    <option value="clever">Smart & Clever</option>
                    <option value="mischievous">Mischievous & Fun</option>
                </select>
            </div>

            <div class="parameter-group">
                <label for="breed">Breed (Optional):</label>
                <select id="breed">
                    <option value="">Any Breed</option>
                    <option value="golden-retriever">Golden Retriever</option>
                    <option value="german-shepherd">German Shepherd</option>
                    <option value="bulldog">Bulldog</option>
                    <option value="poodle">Poodle</option>
                    <option value="husky">Siberian Husky</option>
                    <option value="beagle">Beagle</option>
                    <option value="chihuahua">Chihuahua</option>
                    <option value="rottweiler">Rottweiler</option>
                </select>
            </div>

            <div class="parameter-group">
                <label for="theme">Special Theme:</label>
                <select id="theme">
                    <option value="">No Special Theme</option>
                    <option value="mythology">Mythology & Legends</option>
                    <option value="space">Space & Astronomy</option>
                    <option value="movie">Movies & TV Shows</option>
                    <option value="music">Music & Artists</option>
                    <option value="literature">Books & Literature</option>
                    <option value="travel">Places & Travel</option>
                </select>
            </div>
        </div>
        
        <button class="generate-btn" onclick="generateNames()" id="generateBtn">
            <span class="spinner" id="spinner"></span>
            <span id="btnText">Generate Names ‚ú®</span>
        </button>

        <div class="error-message" id="errorMessage"></div>
        
        <div class="ai-status" id="aiStatus" style="display: none;">
            ü§ñ AI is thinking of creative names based on your preferences...
        </div>
        
        <div class="results-grid" id="resultsGrid"></div>
        
        <div class="favorites" id="favoritesSection" style="display: none;">
            <h3>üåü Your Favorite Names:</h3>
            <div id="favoritesList"></div>
        </div>
    </div>

    <script>
        let favorites = JSON.parse(localStorage.getItem('dogNameFavorites') || '[]');
        let selectedNames = new Set();
        let currentNames = [];

        function showSpinner() {
            const spinner = document.getElementById('spinner');
            const btnText = document.getElementById('btnText');
            const btn = document.getElementById('generateBtn');
            const aiStatus = document.getElementById('aiStatus');
            
            spinner.style.display = 'inline-block';
            btnText.textContent = 'AI Generating...';
            btn.disabled = true;
            aiStatus.style.display = 'block';
        }

        function hideSpinner() {
            const spinner = document.getElementById('spinner');
            const btnText = document.getElementById('btnText');
            const btn = document.getElementById('generateBtn');
            const aiStatus = document.getElementById('aiStatus');
            
            spinner.style.display = 'none';
            btnText.textContent = 'Generate AI Names ‚ú®';
            btn.disabled = false;
            aiStatus.style.display = 'none';
        }

        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 5000);
        }

        async function buildPrompt() {
            const params = {
                category: document.getElementById('category').value,
                gender: document.getElementById('gender').value,
                size: document.getElementById('size').value,
                personality: document.getElementById('personality').value,
                breed: document.getElementById('breed').value,
                theme: document.getElementById('theme').value
            };
            const promptResponse = await fetch('/dog_name_generator/build_prompt', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").content
                },
                body: JSON.stringify(params)
            });

            if (!promptResponse.ok) {
                throw new Error('Failed to build prompt');
            }

            const { prompt } = await promptResponse.json();
            return prompt;
        }

        async function callGeminiAPI(prompt) {
            const response = await fetch('/gemini/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").content
                },
                body: JSON.stringify({ prompt })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to generate names');
            }

            const data = await response.json();
            const text = data.text;

            try {
                const jsonMatch = text.match(/\[[\s\S]*\]/);
                if (jsonMatch) {
                    return JSON.parse(jsonMatch[0]);
                } else {
                    return parseResponseManually(text);
                }
            } catch (e) {
                throw new Error('Failed to parse AI response. Please try again.');
            }
        }


        function parseResponseManually(text) {
            // Fallback parser for when JSON isn't properly formatted
            const names = [];
            const lines = text.split('\n').filter(line => line.trim());
            
            let currentName = null;
            let currentDesc = '';
            let currentMeaning = '';
            
            for (let line of lines) {
                if (line.match(/^\d+\.|^[-*]/)) {
                    if (currentName) {
                        names.push({
                            name: currentName,
                            description: currentDesc,
                            meaning: currentMeaning
                        });
                    }
                    // Extract name from numbered/bulleted list
                    const nameMatch = line.match(/(?:\d+\.|-|\*)\s*([A-Za-z\s'-]+)/);
                    currentName = nameMatch ? nameMatch[1].trim() : line.replace(/^\d+\.|-|\*/, '').trim();
                    currentDesc = '';
                    currentMeaning = '';
                } else if (line.toLowerCase().includes('meaning') || line.toLowerCase().includes('origin')) {
                    currentMeaning = line;
                } else if (currentName && line.trim()) {
                    currentDesc += (currentDesc ? ' ' : '') + line.trim();
                }
            }
            
            if (currentName) {
                names.push({
                    name: currentName,
                    description: currentDesc,
                    meaning: currentMeaning
                });
            }
            
            return names.slice(0, 8); // Ensure we don't exceed 8 names
        }

        async function generateNames() {
            showSpinner();
            hideError();
            
            try {
                const prompt = await buildPrompt();
                const names = await callGeminiAPI(prompt);
                
                if (!names || names.length === 0) {
                    throw new Error('No names were generated. Please try again.');
                }
                
                currentNames = names;
                displayResults(names);
                
            } catch (error) {
                console.error('Error:', error);
                showError(error.message);
            } finally {
                hideSpinner();
            }
        }

        function hideError() {
            document.getElementById('errorMessage').style.display = 'none';
        }

        function displayResults(names) {
            const resultsGrid = document.getElementById('resultsGrid');
            resultsGrid.innerHTML = '';
            
            names.forEach((nameData, index) => {
                const card = document.createElement('div');
                card.className = 'name-card';
                card.onclick = () => toggleSelection(card, nameData.name);
                
                card.innerHTML = `
                    <div class="dog-name">${nameData.name}</div>
                    <div class="name-description">${nameData.description || nameData.meaning || 'A perfect name for your furry friend!'}</div>
                    <button class="save-btn" onclick="saveFavorite('${nameData.name}'); event.stopPropagation();">
                        ${favorites.includes(nameData.name) ? 'Saved ‚úì' : 'Save ‚ù§Ô∏è'}
                    </button>
                `;
                
                resultsGrid.appendChild(card);
            });
            
            resultsGrid.classList.add('show');
        }

        function toggleSelection(card, name) {
            if (selectedNames.has(name)) {
                selectedNames.delete(name);
                card.classList.remove('selected');
            } else {
                selectedNames.add(name);
                card.classList.add('selected');
            }
        }

        function saveFavorite(name) {
            if (!favorites.includes(name)) {
                favorites.push(name);
                localStorage.setItem('dogNameFavorites', JSON.stringify(favorites));
                updateFavoritesList();
                
                // Update button text
                const buttons = document.querySelectorAll('.save-btn');
                buttons.forEach(btn => {
                    if (btn.onclick.toString().includes(name)) {
                        btn.textContent = 'Saved ‚úì';
                        btn.style.background = '#6c757d';
                    }
                });
            }
        }

        function updateFavoritesList() {
            const favoritesSection = document.getElementById('favoritesSection');
            const favoritesList = document.getElementById('favoritesList');
            
            if (favorites.length > 0) {
                favoritesSection.style.display = 'block';
                favoritesList.innerHTML = favorites.map(name => 
                    `<span class="favorite-item" onclick="highlightName('${name}')" title="Click to highlight if in current results">${name}</span>`
                ).join('');
            }
        }

        function highlightName(name) {
            const cards = document.querySelectorAll('.name-card');
            cards.forEach(card => {
                const cardName = card.querySelector('.dog-name').textContent;
                if (cardName === name) {
                    card.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    card.style.transform = 'scale(1.05)';
                    setTimeout(() => {
                        card.style.transform = '';
                    }, 1000);
                }
            });
        }

        // Initialize favorites display
        updateFavoritesList();

        // Add keyboard support
        document.addEventListener('keydown', function(event) {
            if ((event.key === 'Enter' || event.key === ' ') && !document.getElementById('generateBtn').disabled) {
                if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'SELECT') {
                    generateNames();
                }
            }
        });
    </script>
</body>
</html>